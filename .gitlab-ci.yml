image: node:17-alpine

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCe != "merge_request_event"
      when: never # never execute it if the condition was true...
    - when: always # otherwise, execute it always

stages:
  - test
  - build
  - deploy

variables:
  image_repository: docker.io/my-docker-id/my-app
  image_tag: v1.0

run_unit_tests:
  image: node17-alpine3.14 # job will be executed in the container of this image
  tags:
    - ec2
    - docker
    - remote
  stage: test
  before_script:
    - echo "Preparing unit test data"
#    - chmod +x prepare-tests.sh
#    - ./prepare-tests.sh
  script:
    - echo "Running unit tests ..."
    - npm version
  after_script:
    - echo "Clean up temporary files..."
#    - rm -r test-data
#    - ls

run_lint_tests:
  tags:
    - ec2
    - aws
    - remote
  stage: test
  before_script:
    - echo "Preparing lint test data"
  script:
    - echo "Running lint tests ..."
  after_script:
    - echo "Clean up temporary files..."

build_image:
  tags:
    - macos
    - local
  only:
    - main
  stage: build
  script:
    - echo "Building the docker image ..."
    - echo "Tagging the docker image docker.io/my-docker-id/myapp:v1.0"

push_image:
  tags:
    - macos
    - local
  only:
    - main
  stage: build
  needs:
    - build_image
  script:
    - echo "Logging into docker registry..."
    - echo "Pushing docker image $image_repository:$image_tag to registry..."

deploy_image:
  tags:
    - macos
    - local
  only:
    - main
  stage: deploy
  script:
    # here $PROPERTIES_FILE will print the path to that temp file that is referenced by $PROPERTIES_FILE. Sth like:
    # /builds/<some username>/<name of the project>.tmp/<name of the variable>
    - echo "Deploying new docker image $image_repository:$image_tag to $DEPLOYMENT_ENVIRONMENT using the following configuration file - $PROPERTIES_FILE"

    # this will print the contents of the file that the $PROPERTIES_FILE variable references
    - cat $PROPERTIES_FILE